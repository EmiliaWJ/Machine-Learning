{"cells":[{"cell_type":"markdown","metadata":{"id":"J1WnjcYfhEEb"},"source":["Random forest\n","Import data set"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":129},"executionInfo":{"elapsed":80801,"status":"ok","timestamp":1679597230691,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"o08ODUtShM_s","outputId":"346ed412-d5f7-4af0-b5a4-8858e6ae4905"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-35d8d63d-622a-43c8-ac90-80aa5625cfd3\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-35d8d63d-622a-43c8-ac90-80aa5625cfd3\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving winequality-red.csv to winequality-red.csv\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-c52318a3-f284-481b-bff8-3d0474b48673\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-c52318a3-f284-481b-bff8-3d0474b48673\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving winequality-white.csv to winequality-white.csv\n"]}],"source":["import pandas as pd\n","import sklearn\n","import numpy as np\n","\n","from google.colab import files\n","#select the file location\n","uploaded_reds = files.upload()\n","uploaded_whites = files.upload()\n","\n"]},{"cell_type":"markdown","metadata":{"id":"M1NtW_cT3-q5"},"source":["define delimiter!!!"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1679597230691,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"WAm9GQC6o91k","outputId":"543cc05c-8421-4a41-dc4a-ebf2e17a2e4d"},"outputs":[{"output_type":"stream","name":"stdout","text":["      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n","0               7.4             0.700         0.00             1.9      0.076   \n","1               7.8             0.880         0.00             2.6      0.098   \n","2               7.8             0.760         0.04             2.3      0.092   \n","3              11.2             0.280         0.56             1.9      0.075   \n","4               7.4             0.700         0.00             1.9      0.076   \n","...             ...               ...          ...             ...        ...   \n","1594            6.2             0.600         0.08             2.0      0.090   \n","1595            5.9             0.550         0.10             2.2      0.062   \n","1596            6.3             0.510         0.13             2.3      0.076   \n","1597            5.9             0.645         0.12             2.0      0.075   \n","1598            6.0             0.310         0.47             3.6      0.067   \n","\n","      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n","0                    11.0                  34.0  0.99780  3.51       0.56   \n","1                    25.0                  67.0  0.99680  3.20       0.68   \n","2                    15.0                  54.0  0.99700  3.26       0.65   \n","3                    17.0                  60.0  0.99800  3.16       0.58   \n","4                    11.0                  34.0  0.99780  3.51       0.56   \n","...                   ...                   ...      ...   ...        ...   \n","1594                 32.0                  44.0  0.99490  3.45       0.58   \n","1595                 39.0                  51.0  0.99512  3.52       0.76   \n","1596                 29.0                  40.0  0.99574  3.42       0.75   \n","1597                 32.0                  44.0  0.99547  3.57       0.71   \n","1598                 18.0                  42.0  0.99549  3.39       0.66   \n","\n","      alcohol  quality  \n","0         9.4        5  \n","1         9.8        5  \n","2         9.8        5  \n","3         9.8        6  \n","4         9.4        5  \n","...       ...      ...  \n","1594     10.5        5  \n","1595     11.2        6  \n","1596     11.0        6  \n","1597     10.2        5  \n","1598     11.0        6  \n","\n","[1599 rows x 12 columns]\n"]}],"source":["import io\n","#red wine data set\n","redwines = pd.read_csv(io.BytesIO(uploaded_reds['winequality-red.csv']), delimiter=';')\n","redwines.head()\n","\n","print(redwines)\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1442,"status":"ok","timestamp":1679597235408,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"IYGxGJXrIbTa","outputId":"3c5fbade-595a-442c-fd02-74ec41ffc9c2"},"outputs":[{"output_type":"stream","name":"stdout","text":["      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n","0               7.0              0.27         0.36            20.7      0.045   \n","1               6.3              0.30         0.34             1.6      0.049   \n","2               8.1              0.28         0.40             6.9      0.050   \n","3               7.2              0.23         0.32             8.5      0.058   \n","4               7.2              0.23         0.32             8.5      0.058   \n","...             ...               ...          ...             ...        ...   \n","4893            6.2              0.21         0.29             1.6      0.039   \n","4894            6.6              0.32         0.36             8.0      0.047   \n","4895            6.5              0.24         0.19             1.2      0.041   \n","4896            5.5              0.29         0.30             1.1      0.022   \n","4897            6.0              0.21         0.38             0.8      0.020   \n","\n","      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n","0                    45.0                 170.0  1.00100  3.00       0.45   \n","1                    14.0                 132.0  0.99400  3.30       0.49   \n","2                    30.0                  97.0  0.99510  3.26       0.44   \n","3                    47.0                 186.0  0.99560  3.19       0.40   \n","4                    47.0                 186.0  0.99560  3.19       0.40   \n","...                   ...                   ...      ...   ...        ...   \n","4893                 24.0                  92.0  0.99114  3.27       0.50   \n","4894                 57.0                 168.0  0.99490  3.15       0.46   \n","4895                 30.0                 111.0  0.99254  2.99       0.46   \n","4896                 20.0                 110.0  0.98869  3.34       0.38   \n","4897                 22.0                  98.0  0.98941  3.26       0.32   \n","\n","      alcohol  quality  \n","0         8.8        6  \n","1         9.5        6  \n","2        10.1        6  \n","3         9.9        6  \n","4         9.9        6  \n","...       ...      ...  \n","4893     11.2        6  \n","4894      9.6        5  \n","4895      9.4        6  \n","4896     12.8        7  \n","4897     11.8        6  \n","\n","[4898 rows x 12 columns]\n"]}],"source":["#white wine data set\n","whitewines = pd.read_csv(io.BytesIO(uploaded_whites['winequality-white.csv']), delimiter=';')\n","redwines.head()\n","\n","print(whitewines)\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1679597240072,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"AQwnJ7VIHVbN","outputId":"7026a7de-8952-4404-ac58-cf25073ba342"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1599 entries, 0 to 1598\n","Data columns (total 12 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         1599 non-null   float64\n"," 1   volatile acidity      1599 non-null   float64\n"," 2   citric acid           1599 non-null   float64\n"," 3   residual sugar        1599 non-null   float64\n"," 4   chlorides             1599 non-null   float64\n"," 5   free sulfur dioxide   1599 non-null   float64\n"," 6   total sulfur dioxide  1599 non-null   float64\n"," 7   density               1599 non-null   float64\n"," 8   pH                    1599 non-null   float64\n"," 9   sulphates             1599 non-null   float64\n"," 10  alcohol               1599 non-null   float64\n"," 11  quality               1599 non-null   int64  \n","dtypes: float64(11), int64(1)\n","memory usage: 150.0 KB\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4898 entries, 0 to 4897\n","Data columns (total 12 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         4898 non-null   float64\n"," 1   volatile acidity      4898 non-null   float64\n"," 2   citric acid           4898 non-null   float64\n"," 3   residual sugar        4898 non-null   float64\n"," 4   chlorides             4898 non-null   float64\n"," 5   free sulfur dioxide   4898 non-null   float64\n"," 6   total sulfur dioxide  4898 non-null   float64\n"," 7   density               4898 non-null   float64\n"," 8   pH                    4898 non-null   float64\n"," 9   sulphates             4898 non-null   float64\n"," 10  alcohol               4898 non-null   float64\n"," 11  quality               4898 non-null   int64  \n","dtypes: float64(11), int64(1)\n","memory usage: 459.3 KB\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6497 entries, 0 to 6496\n","Data columns (total 12 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         6497 non-null   float64\n"," 1   volatile acidity      6497 non-null   float64\n"," 2   citric acid           6497 non-null   float64\n"," 3   residual sugar        6497 non-null   float64\n"," 4   chlorides             6497 non-null   float64\n"," 5   free sulfur dioxide   6497 non-null   float64\n"," 6   total sulfur dioxide  6497 non-null   float64\n"," 7   density               6497 non-null   float64\n"," 8   pH                    6497 non-null   float64\n"," 9   sulphates             6497 non-null   float64\n"," 10  alcohol               6497 non-null   float64\n"," 11  quality               6497 non-null   int64  \n","dtypes: float64(11), int64(1)\n","memory usage: 609.2 KB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-47676a557966>:9: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  wines = redwines.append(whitewines, ignore_index=True)\n"]}],"source":["#print data sets info\n","\n","#redwines\n","redwines.info()\n","\n","#whitewines\n","whitewines.info()\n","\n","wines = redwines.append(whitewines, ignore_index=True)\n","wines.info()\n","\n","\n","# Dataset is now stored in a Pandas Dataframe"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"elapsed":317,"status":"ok","timestamp":1679597244830,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"6jUGE0C638ja","outputId":"dc5e700f-a6ea-44df-c988-66ee98412161"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","count    1599.000000       1599.000000  1599.000000     1599.000000   \n","mean        8.319637          0.527821     0.270976        2.538806   \n","std         1.741096          0.179060     0.194801        1.409928   \n","min         4.600000          0.120000     0.000000        0.900000   \n","25%         7.100000          0.390000     0.090000        1.900000   \n","50%         7.900000          0.520000     0.260000        2.200000   \n","75%         9.200000          0.640000     0.420000        2.600000   \n","max        15.900000          1.580000     1.000000       15.500000   \n","\n","         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n","count  1599.000000          1599.000000           1599.000000  1599.000000   \n","mean      0.087467            15.874922             46.467792     0.996747   \n","std       0.047065            10.460157             32.895324     0.001887   \n","min       0.012000             1.000000              6.000000     0.990070   \n","25%       0.070000             7.000000             22.000000     0.995600   \n","50%       0.079000            14.000000             38.000000     0.996750   \n","75%       0.090000            21.000000             62.000000     0.997835   \n","max       0.611000            72.000000            289.000000     1.003690   \n","\n","                pH    sulphates      alcohol      quality  \n","count  1599.000000  1599.000000  1599.000000  1599.000000  \n","mean      3.311113     0.658149    10.422983     5.636023  \n","std       0.154386     0.169507     1.065668     0.807569  \n","min       2.740000     0.330000     8.400000     3.000000  \n","25%       3.210000     0.550000     9.500000     5.000000  \n","50%       3.310000     0.620000    10.200000     6.000000  \n","75%       3.400000     0.730000    11.100000     6.000000  \n","max       4.010000     2.000000    14.900000     8.000000  "],"text/html":["\n","  <div id=\"df-e802f3f7-23dd-433e-bf44-e66f21983130\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","      <td>1599.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>8.319637</td>\n","      <td>0.527821</td>\n","      <td>0.270976</td>\n","      <td>2.538806</td>\n","      <td>0.087467</td>\n","      <td>15.874922</td>\n","      <td>46.467792</td>\n","      <td>0.996747</td>\n","      <td>3.311113</td>\n","      <td>0.658149</td>\n","      <td>10.422983</td>\n","      <td>5.636023</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.741096</td>\n","      <td>0.179060</td>\n","      <td>0.194801</td>\n","      <td>1.409928</td>\n","      <td>0.047065</td>\n","      <td>10.460157</td>\n","      <td>32.895324</td>\n","      <td>0.001887</td>\n","      <td>0.154386</td>\n","      <td>0.169507</td>\n","      <td>1.065668</td>\n","      <td>0.807569</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.600000</td>\n","      <td>0.120000</td>\n","      <td>0.000000</td>\n","      <td>0.900000</td>\n","      <td>0.012000</td>\n","      <td>1.000000</td>\n","      <td>6.000000</td>\n","      <td>0.990070</td>\n","      <td>2.740000</td>\n","      <td>0.330000</td>\n","      <td>8.400000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>7.100000</td>\n","      <td>0.390000</td>\n","      <td>0.090000</td>\n","      <td>1.900000</td>\n","      <td>0.070000</td>\n","      <td>7.000000</td>\n","      <td>22.000000</td>\n","      <td>0.995600</td>\n","      <td>3.210000</td>\n","      <td>0.550000</td>\n","      <td>9.500000</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>7.900000</td>\n","      <td>0.520000</td>\n","      <td>0.260000</td>\n","      <td>2.200000</td>\n","      <td>0.079000</td>\n","      <td>14.000000</td>\n","      <td>38.000000</td>\n","      <td>0.996750</td>\n","      <td>3.310000</td>\n","      <td>0.620000</td>\n","      <td>10.200000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>9.200000</td>\n","      <td>0.640000</td>\n","      <td>0.420000</td>\n","      <td>2.600000</td>\n","      <td>0.090000</td>\n","      <td>21.000000</td>\n","      <td>62.000000</td>\n","      <td>0.997835</td>\n","      <td>3.400000</td>\n","      <td>0.730000</td>\n","      <td>11.100000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>15.900000</td>\n","      <td>1.580000</td>\n","      <td>1.000000</td>\n","      <td>15.500000</td>\n","      <td>0.611000</td>\n","      <td>72.000000</td>\n","      <td>289.000000</td>\n","      <td>1.003690</td>\n","      <td>4.010000</td>\n","      <td>2.000000</td>\n","      <td>14.900000</td>\n","      <td>8.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e802f3f7-23dd-433e-bf44-e66f21983130')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e802f3f7-23dd-433e-bf44-e66f21983130 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e802f3f7-23dd-433e-bf44-e66f21983130');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["# Display basic statistics for the features\n","# Look at the non-numerical feature (object)\n","redwines.describe()"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":361},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1679597249143,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"xFKX5PlBIOFx","outputId":"1251d156-2e31-41a2-d9ac-88d985944432"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","count    4898.000000       4898.000000  4898.000000     4898.000000   \n","mean        6.854788          0.278241     0.334192        6.391415   \n","std         0.843868          0.100795     0.121020        5.072058   \n","min         3.800000          0.080000     0.000000        0.600000   \n","25%         6.300000          0.210000     0.270000        1.700000   \n","50%         6.800000          0.260000     0.320000        5.200000   \n","75%         7.300000          0.320000     0.390000        9.900000   \n","max        14.200000          1.100000     1.660000       65.800000   \n","\n","         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n","count  4898.000000          4898.000000           4898.000000  4898.000000   \n","mean      0.045772            35.308085            138.360657     0.994027   \n","std       0.021848            17.007137             42.498065     0.002991   \n","min       0.009000             2.000000              9.000000     0.987110   \n","25%       0.036000            23.000000            108.000000     0.991723   \n","50%       0.043000            34.000000            134.000000     0.993740   \n","75%       0.050000            46.000000            167.000000     0.996100   \n","max       0.346000           289.000000            440.000000     1.038980   \n","\n","                pH    sulphates      alcohol      quality  \n","count  4898.000000  4898.000000  4898.000000  4898.000000  \n","mean      3.188267     0.489847    10.514267     5.877909  \n","std       0.151001     0.114126     1.230621     0.885639  \n","min       2.720000     0.220000     8.000000     3.000000  \n","25%       3.090000     0.410000     9.500000     5.000000  \n","50%       3.180000     0.470000    10.400000     6.000000  \n","75%       3.280000     0.550000    11.400000     6.000000  \n","max       3.820000     1.080000    14.200000     9.000000  "],"text/html":["\n","  <div id=\"df-839de5af-a440-41e4-a485-7071d5a69188\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","      <td>4898.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>6.854788</td>\n","      <td>0.278241</td>\n","      <td>0.334192</td>\n","      <td>6.391415</td>\n","      <td>0.045772</td>\n","      <td>35.308085</td>\n","      <td>138.360657</td>\n","      <td>0.994027</td>\n","      <td>3.188267</td>\n","      <td>0.489847</td>\n","      <td>10.514267</td>\n","      <td>5.877909</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.843868</td>\n","      <td>0.100795</td>\n","      <td>0.121020</td>\n","      <td>5.072058</td>\n","      <td>0.021848</td>\n","      <td>17.007137</td>\n","      <td>42.498065</td>\n","      <td>0.002991</td>\n","      <td>0.151001</td>\n","      <td>0.114126</td>\n","      <td>1.230621</td>\n","      <td>0.885639</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>3.800000</td>\n","      <td>0.080000</td>\n","      <td>0.000000</td>\n","      <td>0.600000</td>\n","      <td>0.009000</td>\n","      <td>2.000000</td>\n","      <td>9.000000</td>\n","      <td>0.987110</td>\n","      <td>2.720000</td>\n","      <td>0.220000</td>\n","      <td>8.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>6.300000</td>\n","      <td>0.210000</td>\n","      <td>0.270000</td>\n","      <td>1.700000</td>\n","      <td>0.036000</td>\n","      <td>23.000000</td>\n","      <td>108.000000</td>\n","      <td>0.991723</td>\n","      <td>3.090000</td>\n","      <td>0.410000</td>\n","      <td>9.500000</td>\n","      <td>5.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>6.800000</td>\n","      <td>0.260000</td>\n","      <td>0.320000</td>\n","      <td>5.200000</td>\n","      <td>0.043000</td>\n","      <td>34.000000</td>\n","      <td>134.000000</td>\n","      <td>0.993740</td>\n","      <td>3.180000</td>\n","      <td>0.470000</td>\n","      <td>10.400000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>7.300000</td>\n","      <td>0.320000</td>\n","      <td>0.390000</td>\n","      <td>9.900000</td>\n","      <td>0.050000</td>\n","      <td>46.000000</td>\n","      <td>167.000000</td>\n","      <td>0.996100</td>\n","      <td>3.280000</td>\n","      <td>0.550000</td>\n","      <td>11.400000</td>\n","      <td>6.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>14.200000</td>\n","      <td>1.100000</td>\n","      <td>1.660000</td>\n","      <td>65.800000</td>\n","      <td>0.346000</td>\n","      <td>289.000000</td>\n","      <td>440.000000</td>\n","      <td>1.038980</td>\n","      <td>3.820000</td>\n","      <td>1.080000</td>\n","      <td>14.200000</td>\n","      <td>9.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-839de5af-a440-41e4-a485-7071d5a69188')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-839de5af-a440-41e4-a485-7071d5a69188 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-839de5af-a440-41e4-a485-7071d5a69188');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["## Display basic statistics for the features\n","whitewines.describe()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":6332,"status":"ok","timestamp":1679597258410,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"9ByhfrrnPFHf","outputId":"ecf9a081-883f-46ef-d07c-84fb23c15924"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x648 with 12 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1152x648 with 12 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Plot a histogram of each numerical feature\n","# (the first line determines which graphical backend to use - in this case Jupyter's own)\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","redwines.hist(bins=50, figsize=(16,9),)\n","whitewines.hist(bins=50, figsize=(16,9),)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":437},"executionInfo":{"elapsed":575,"status":"ok","timestamp":1679597261267,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"NuWVhn924SGR","outputId":"a6423f58-4222-4bed-ab5e-9dbbf84bb62d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 504x216 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 504x216 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["# Plot a histogram by citric acid\n","redwines.hist(column='citric acid',bins=50, figsize=(7,3),)\n","whitewines.hist(column='citric acid',bins=50, figsize=(7,3),)\n","\n","plt.show()"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":437},"executionInfo":{"elapsed":1226,"status":"ok","timestamp":1679597265177,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"_OC-4CA6MvJ0","outputId":"3f049a92-2692-4e8c-9266-553f1a040022"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 504x216 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 504x216 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}],"source":["# Plot a histogram by alcohol\n","redwines.hist(column='density',bins=50, figsize=(7,3),)\n","whitewines.hist(column='density',bins=50, figsize=(7,3),)\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"z1sU7iiBIqBo"},"source":[]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1679597269724,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"-V5RxgYB5FJV","outputId":"1c7c9c68-0b64-44b0-8d7f-63d768957e52"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality                 1.000000\n","alcohol                 0.476166\n","sulphates               0.251397\n","citric acid             0.226373\n","fixed acidity           0.124052\n","residual sugar          0.013732\n","free sulfur dioxide    -0.050656\n","pH                     -0.057731\n","chlorides              -0.128907\n","density                -0.174919\n","total sulfur dioxide   -0.185100\n","volatile acidity       -0.390558\n","Name: quality, dtype: float64"]},"metadata":{},"execution_count":10}],"source":["# How much does each feature correlate with the value?\n","# The correlation coefficient ranges from -1 (100% negative correlation) to 1 (100% positive correlation)\n","corr_matrix = redwines.corr()\n","corr_matrix[\"quality\"].sort_values(ascending=False)"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1336,"status":"ok","timestamp":1679597274203,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"agEo9HfsQbIw","outputId":"ee035463-8c70-4c6b-80b4-e1dcd2617749"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality                 1.000000\n","alcohol                 0.435575\n","pH                      0.099427\n","sulphates               0.053678\n","free sulfur dioxide     0.008158\n","citric acid            -0.009209\n","residual sugar         -0.097577\n","fixed acidity          -0.113663\n","total sulfur dioxide   -0.174737\n","volatile acidity       -0.194723\n","chlorides              -0.209934\n","density                -0.307123\n","Name: quality, dtype: float64"]},"metadata":{},"execution_count":11}],"source":["# Correlation\n","corr_matrix = whitewines.corr()\n","corr_matrix[\"quality\"].sort_values(ascending=False)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1679597276760,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"Zg7Ytk-uI9cA","outputId":"e3b57fa8-28f2-4488-d11e-e7d005e84ed7"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1599 entries, 0 to 1598\n","Data columns (total 11 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         1599 non-null   float64\n"," 1   volatile acidity      1599 non-null   float64\n"," 2   citric acid           1599 non-null   float64\n"," 3   residual sugar        1599 non-null   float64\n"," 4   chlorides             1599 non-null   float64\n"," 5   total sulfur dioxide  1599 non-null   float64\n"," 6   density               1599 non-null   float64\n"," 7   pH                    1599 non-null   float64\n"," 8   sulphates             1599 non-null   float64\n"," 9   alcohol               1599 non-null   float64\n"," 10  quality               1599 non-null   int64  \n","dtypes: float64(10), int64(1)\n","memory usage: 137.5 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["quality                 1.000000\n","alcohol                 0.476166\n","sulphates               0.251397\n","citric acid             0.226373\n","fixed acidity           0.124052\n","residual sugar          0.013732\n","pH                     -0.057731\n","chlorides              -0.128907\n","density                -0.174919\n","total sulfur dioxide   -0.185100\n","volatile acidity       -0.390558\n","Name: quality, dtype: float64"]},"metadata":{},"execution_count":12}],"source":["# Drop min corelated columns - red wine\n","redwines_corelated = redwines.drop(columns=\"free sulfur dioxide\")\n","redwines_corelated.info()\n","\n","corr_matrix = redwines_corelated.corr()\n","corr_matrix[\"quality\"].sort_values(ascending=False)"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1679597281948,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"bLToWKD_Q7BW","outputId":"52d13780-95f4-4a42-87a7-6da01c503f57"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4898 entries, 0 to 4897\n","Data columns (total 11 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         4898 non-null   float64\n"," 1   volatile acidity      4898 non-null   float64\n"," 2   citric acid           4898 non-null   float64\n"," 3   residual sugar        4898 non-null   float64\n"," 4   chlorides             4898 non-null   float64\n"," 5   total sulfur dioxide  4898 non-null   float64\n"," 6   density               4898 non-null   float64\n"," 7   pH                    4898 non-null   float64\n"," 8   sulphates             4898 non-null   float64\n"," 9   alcohol               4898 non-null   float64\n"," 10  quality               4898 non-null   int64  \n","dtypes: float64(10), int64(1)\n","memory usage: 421.0 KB\n"]},{"output_type":"execute_result","data":{"text/plain":["quality                 1.000000\n","alcohol                 0.435575\n","pH                      0.099427\n","sulphates               0.053678\n","citric acid            -0.009209\n","residual sugar         -0.097577\n","fixed acidity          -0.113663\n","total sulfur dioxide   -0.174737\n","volatile acidity       -0.194723\n","chlorides              -0.209934\n","density                -0.307123\n","Name: quality, dtype: float64"]},"metadata":{},"execution_count":13}],"source":["# Ddrop min corelated columns - white wine\n","whitewines_coralted = whitewines.drop(columns=\"free sulfur dioxide\")\n","whitewines_coralted.info()\n","\n","corr_matrix = whitewines_coralted.corr()\n","corr_matrix[\"quality\"].sort_values(ascending=False)"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":395,"status":"ok","timestamp":1679597285147,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"QrPScGBhlHKo","outputId":"f0daf4d0-4207-4442-dd62-9c6291dc1cc3"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6497 entries, 0 to 6496\n","Data columns (total 11 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   fixed acidity         6497 non-null   float64\n"," 1   volatile acidity      6497 non-null   float64\n"," 2   citric acid           6497 non-null   float64\n"," 3   residual sugar        6497 non-null   float64\n"," 4   chlorides             6497 non-null   float64\n"," 5   total sulfur dioxide  6497 non-null   float64\n"," 6   density               6497 non-null   float64\n"," 7   pH                    6497 non-null   float64\n"," 8   sulphates             6497 non-null   float64\n"," 9   alcohol               6497 non-null   float64\n"," 10  quality               6497 non-null   int64  \n","dtypes: float64(10), int64(1)\n","memory usage: 558.5 KB\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-14-dad08f11b07b>:4: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n","  wines_rw = redwines_corelated.append(whitewines_coralted, ignore_index=True)\n"]}],"source":["# Data sets together - wines\n","\n","wines_rw = redwines_corelated.append(whitewines_coralted, ignore_index=True)\n","wines_rw.info()"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":309,"status":"ok","timestamp":1679597288947,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"ayseZ3xyYYpI","outputId":"ddabf573-dd1d-464d-d644-d116a60e73e4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["quality                 1.000000\n","alcohol                 0.444319\n","citric acid             0.085532\n","free sulfur dioxide     0.055463\n","sulphates               0.038485\n","pH                      0.019506\n","residual sugar         -0.036980\n","total sulfur dioxide   -0.041385\n","fixed acidity          -0.076743\n","chlorides              -0.200666\n","volatile acidity       -0.265699\n","density                -0.305858\n","Name: quality, dtype: float64"]},"metadata":{},"execution_count":15}],"source":["# How much does each feature correlate with the value?\n","# The correlation coefficient ranges from -1 (100% negative correlation) to 1 (100% positive correlation)\n","corr_matrix_rw = wines.corr()\n","corr_matrix_rw[\"quality\"].sort_values(ascending=False)"]},{"cell_type":"markdown","metadata":{"id":"kpnp33fqV0Bu"},"source":["**Data Preparation**"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"36zA2Bj6V3tV","executionInfo":{"status":"ok","timestamp":1679597295402,"user_tz":-60,"elapsed":316,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}}},"outputs":[],"source":["# Split the dataset randomly in training set (80%) and test set (20%). Use a fixed random seed (42).\n","# As a rule of thumb, pick 20% for the test set, unless the dataset is very large.\n","from sklearn.model_selection import train_test_split\n","\n","# red whine\n","train_set_redwines, test_set_redwines = train_test_split(redwines_corelated, test_size=0.2, random_state=42)\n","\n","# white wine\n","train_set_whitewines, test_set_whitewines = train_test_split(whitewines_coralted, test_size=0.2, random_state=42)\n","\n","# wines\n","train_set_rw, test_set_rw = train_test_split(wines_rw, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"HHbPuEShWJmf","executionInfo":{"status":"ok","timestamp":1679597304430,"user_tz":-60,"elapsed":835,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}}},"outputs":[],"source":["from tables import Column\n","# red wine\n","# Remove the labels from the training set (the method returns a new set, and it does not affect the original one).\n","redwines_predictors = train_set_redwines.drop(columns=\"quality\")\n","\n","# Keep the labels in a separate set.\n","redwines_labels = train_set_redwines[\"quality\"].copy()\n","\n","#white wine\n","whitewines_predictors = train_set_whitewines.drop(columns=\"quality\")\n","whitewines_labels = train_set_whitewines[\"quality\"].copy()\n","\n","#wine\n","wines_rw_predictors = train_set_rw.drop(columns=\"quality\")\n","wines_rw_labels = train_set_rw[\"quality\"].copy()"]},{"cell_type":"markdown","metadata":{"id":"8B3CRBJbafrP"},"source":["Random Forest"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"executionInfo":{"elapsed":2871,"status":"ok","timestamp":1679597359711,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"31qcf28naixO","outputId":"1ae86803-1330-49b0-96b9-a06d1ca947ab"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":20}],"source":["# RandomForestClassifier,\n","from sklearn.datasets import load_iris\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# Train a RandomForestClassifier\n","# n_estimators (default=100): The number of trees in the forest.\n","# bootstrap (default=True): Whether to use bagging.\n","# oob-score (default=False): Whether to use out-of-bag evaluation.\n","# n_jobs (default=None): The number of jobs to run in parallel (-1 means using all processors)\n","\n","# redwine\n","rnd_clf = RandomForestClassifier(n_estimators=500, bootstrap=True, oob_score=True, n_jobs=-1, random_state=42)\n","rnd_clf.fit(redwines_predictors, redwines_labels, None)\n"]},{"cell_type":"code","source":["rnd_clf.oob_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtIqZRaW8P15","executionInfo":{"status":"ok","timestamp":1679599717423,"user_tz":-60,"elapsed":510,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"outputId":"f3caa4e7-9ab9-4e82-ea0d-4a363c7de1f7"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7044566067240031"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"executionInfo":{"elapsed":6566,"status":"ok","timestamp":1679597370173,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"V4EB5LO7dyqK","outputId":"2c0b7b76-6963-4a30-942c-0b47a6223208"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=500, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":21}],"source":["#whitewine\n","rnd_clf_w = RandomForestClassifier(n_estimators=500, bootstrap=True, oob_score=True, n_jobs=-1, random_state=42)\n","rnd_clf_w.fit(whitewines_predictors, whitewines_labels, None)"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"executionInfo":{"elapsed":3887,"status":"ok","timestamp":1679597377025,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"wRnh2FRGqNP1","outputId":"e386ee42-a6b4-48ff-d817-4beac6830245"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=300, n_jobs=-1, oob_score=True,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=300, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=300, n_jobs=-1, oob_score=True,\n","                       random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":22}],"source":["# wines\n","rnd_clf_rw = RandomForestClassifier(n_estimators=300, bootstrap=True, oob_score=True, n_jobs=-1, random_state=42)\n","rnd_clf_rw.fit(wines_rw_predictors, wines_rw_labels, None)"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":313,"status":"ok","timestamp":1679597379679,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"22MNp43DigcH","outputId":"ad47bb3f-5085-4248-c73c-4d2df10dd21e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08265765, 0.10445576, 0.0787256 , 0.07707868, 0.0886255 ,\n","       0.11532781, 0.09651957, 0.0805229 , 0.11906979, 0.15701674])"]},"metadata":{},"execution_count":23}],"source":["# Display the relative importance of each feature:\n","#quality, alcohol, sulphates, citric acid, fixed acidity, residual sugar, free sulfur dioxide, pH\n","#redwine\n","rnd_clf.feature_importances_"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":733,"status":"ok","timestamp":1679597382457,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"OjFuFxmOeb5Y","outputId":"793fe2c4-d811-490f-f8e7-41c251882409"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08412068, 0.11235238, 0.08977943, 0.09942244, 0.09213901,\n","       0.1049337 , 0.11383115, 0.09527728, 0.08740938, 0.12073455])"]},"metadata":{},"execution_count":24}],"source":["#whitewine\n","rnd_clf_w.feature_importances_"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1679597383913,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"gNZs_npLqzhV","outputId":"099fcc5d-a2c2-440e-e189-d54dd6b5f057"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.08060161, 0.11106378, 0.08685346, 0.09291478, 0.09414536,\n","       0.1038158 , 0.11065189, 0.09272193, 0.09467085, 0.13256054])"]},"metadata":{},"execution_count":25}],"source":["# wines\n","rnd_clf_rw.feature_importances_"]},{"cell_type":"code","execution_count":30,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":312,"status":"ok","timestamp":1679597778844,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"_yM_24fWuSio","outputId":"66168ff8-7a20-46a8-f0cd-50fd7ae4dafc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":30}],"source":["# red wine\n","# Measure the models RMSE on the training set\n","from sklearn.metrics import mean_squared_error\n","\n","redwines_predictions = rnd_clf.predict(redwines_predictors)\n","tree_mse = mean_squared_error(redwines_labels, redwines_predictions)\n","tree_rmse = np.sqrt(tree_mse)\n","tree_rmse"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":769,"status":"ok","timestamp":1679597736296,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"HNJwap_zerjw","outputId":"f4292a2e-7152-467b-fa3f-3f4351d80e4c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":28}],"source":["# whitewine\n","# Measure the models RMSE on the training set\n","from sklearn.metrics import mean_squared_error\n","\n","whitewines_predictions = rnd_clf_w.predict(whitewines_predictors)\n","tree_mse_w = mean_squared_error(whitewines_labels, whitewines_predictions)\n","tree_rmse_w = np.sqrt(tree_mse_w)\n","tree_rmse_w"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1679597782749,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"6qQjEHGtbGl5","outputId":"9dca51f1-55bf-4e55-ea82-7a14463eb0b6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":31}],"source":["# Measure the models MAE on the training set\n","# Red wine\n","from sklearn.metrics import mean_absolute_error\n","\n","tree_mae = mean_absolute_error(redwines_labels, redwines_predictions)\n","tree_mae"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1030,"status":"ok","timestamp":1679597789083,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"zE2C9Ny0fRAr","outputId":"ae65ec8b-7e15-4bf9-c63c-0239c2a2f562"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":32}],"source":["# Measure the models MAE on the training set\n","#whitewine\n","tree_mae_w = mean_absolute_error(whitewines_labels, whitewines_predictions)\n","tree_mae_w"]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":466,"status":"ok","timestamp":1679597791547,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"EUIpRH21rF13","outputId":"f693ceb2-c5bb-4fd2-c7b4-fea2372ca12d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0"]},"metadata":{},"execution_count":33}],"source":["# wines\n","wines_rw_predictons = rnd_clf_rw.predict(wines_rw_predictors)\n","tree_mse_rw = mean_squared_error(wines_rw_labels, wines_rw_predictons)\n","tree_rmse_rw = np.sqrt(tree_mse_rw)\n","tree_rmse_rw"]},{"cell_type":"markdown","metadata":{"id":"Fjk8c7XUvhJa"},"source":["Model Evaluation"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":246,"status":"ok","timestamp":1679597793455,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"rpTnUmmXvkfy","outputId":"15438920-2f7f-4aa3-ee65-d1146225a02e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.625"]},"metadata":{},"execution_count":34}],"source":["#redwine\n","\n","# Remove the labels from the test set.\n","X_test = test_set_redwines.drop(\"quality\", axis=1)\n","# Keep the labels in a separate set.\n","y_test = test_set_redwines[\"quality\"].copy()\n","\n","# Evaluate the DecisionTreeRegressor.\n","tree_reg_predictions = rnd_clf.predict(X_test)\n","tree_reg_mse = mean_squared_error(y_test, tree_reg_predictions)\n","tree_reg_rmse = np.sqrt(tree_reg_mse)\n","tree_reg_rmse"]},{"cell_type":"markdown","source":[],"metadata":{"id":"t9avMvSxWpjm"}},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1157,"status":"ok","timestamp":1679597797273,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"6es9595Vfp9M","outputId":"e731559b-48a8-4cc8-d420-b21e462473d7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9513685094727103"]},"metadata":{},"execution_count":35}],"source":["#whitewine\n","\n","# Remove the labels from the test set.\n","x_test_w = test_set_whitewines.drop(\"quality\", axis=1)\n","# Keep the labels in a separate set.\n","y_test_w = test_set_whitewines[\"quality\"].copy()\n","\n","# Evaluate the DecisionTreeRegressor.\n","tree_reg_predictions_w = rnd_clf.predict(x_test_w)\n","tree_reg_mse_w = mean_squared_error(y_test_w, tree_reg_predictions_w)\n","tree_reg_rmse_w = np.sqrt(tree_reg_mse_w)\n","tree_reg_rmse_w"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":342,"status":"ok","timestamp":1679597800382,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"9a1I2Uy1tO6y","outputId":"0052cc00-0c47-4ae4-e4c8-4adf10f047bc"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8320502943378437"]},"metadata":{},"execution_count":36}],"source":["#wines\n","# with outliners 0.8901166734241598\n","# without outliners \n","\n","# Remove the labels from the test set.\n","x_test_rw = test_set_rw.drop(\"quality\", axis=1)\n","# Keep the labels in a separate set.\n","y_test_rw = test_set_rw[\"quality\"].copy()\n","\n","# Evaluate the DecisionTreeRegressor.\n","tree_reg_predictions_rw = rnd_clf.predict(x_test_rw)\n","tree_reg_mse_rw = mean_squared_error(y_test_rw, tree_reg_predictions_rw)\n","tree_reg_rmse_rw = np.sqrt(tree_reg_mse_rw)\n","tree_reg_rmse_rw"]},{"cell_type":"code","source":["#['fixed acidity','volatile acidity','citric acid','residual sugar','chlorides','free sulfur dioxide','total sulfur dioxide','density','pH','sulphates','alcohol']\n","# Predict quality of given example\n","predict = rnd_clf.predict([[7.4,0.700,0.00,1.9,0.076,11.0,0.99780,3.51,0.56,9.4]])\n","\n","rnd_clf.predict_proba([[7.4,0.700,0.00,1.9,0.076,11.0,0.99780,3.51,0.56,9.4]])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"icO8GTMGi185","executionInfo":{"status":"ok","timestamp":1679604573303,"user_tz":-60,"elapsed":388,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"outputId":"0c2cf871-e589-4956-a046-f5403f5217d2"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0.008, 0.046, 0.878, 0.058, 0.01 , 0.   ]])"]},"metadata":{},"execution_count":71}]},{"cell_type":"markdown","source":["Hyper parameter tunning\n","RandomizedSearchCV"],"metadata":{"id":"fVuwkBflPFR4"}},{"cell_type":"code","execution_count":54,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":319,"status":"ok","timestamp":1679598827649,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"},"user_tz":-60},"id":"QzdZ43Pivh2t","outputId":"c282fccd-8359-4eba-e32d-4374b2efe025"},"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_estimators': [10, 20, 30, 40], 'max_features': ['auto', 'sqrt'], 'max_depth': [2, 4, 7, 10, None], 'min_samples_split': [2, 4, 6], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': [True, False],\n"," 'max_depth': [20, 40, 60, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 4, 6],\n"," 'n_estimators': [200, 400, 600]}"]},"metadata":{},"execution_count":54}],"source":["from sklearn.model_selection import RandomizedSearchCV\n","\n","# Number of trees in random forest\n","n_estimators = [int(x) for x in np.linspace(start = 10, stop = 40, num = 4)]\n","# Number of features to consider at every split\n","max_features = ['auto', 'sqrt']\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(2, 10, num = 4)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 4, 6]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators,\n","               'max_features': max_features,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","print(random_grid)\n","{'bootstrap': [True, False],\n"," 'max_depth': [20, 40, 60, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 4, 6],\n"," 'n_estimators': [200, 400, 600]}"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"fJBJ03mKwADL","executionInfo":{"status":"ok","timestamp":1679598898113,"user_tz":-60,"elapsed":9456,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"colab":{"base_uri":"https://localhost:8080/","height":134},"outputId":"4539e201-fcc2-4e7b-ffcd-8f7d7df7bdaa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 20 candidates, totalling 60 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=20,\n","                   n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [2, 4, 7, 10, None],\n","                                        'max_features': ['auto', 'sqrt'],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 4, 6],\n","                                        'n_estimators': [10, 20, 30, 40]},\n","                   random_state=42, verbose=2)"],"text/html":["<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=20,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [2, 4, 7, 10, None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 4, 6],\n","                                        &#x27;n_estimators&#x27;: [10, 20, 30, 40]},\n","                   random_state=42, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=20,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [2, 4, 7, 10, None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 4, 6],\n","                                        &#x27;n_estimators&#x27;: [10, 20, 30, 40]},\n","                   random_state=42, verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":56}],"source":["# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestClassifier()\n","# Random search of parameters, using 3 fold cross validation, \n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 20, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(wines_rw_predictors, wines_rw_labels)"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"-cmtyi7h_YDk","executionInfo":{"status":"ok","timestamp":1679598602767,"user_tz":-60,"elapsed":310,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"883bcb5d-d602-47c4-d8b4-e0074d80d31e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'n_estimators': 30,\n"," 'min_samples_split': 6,\n"," 'min_samples_leaf': 2,\n"," 'max_features': 'sqrt',\n"," 'max_depth': None,\n"," 'bootstrap': False}"]},"metadata":{},"execution_count":50}],"source":["#best parameters\n","rf_random.best_params_"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"QfvkVY_pySS6","executionInfo":{"status":"ok","timestamp":1679598907632,"user_tz":-60,"elapsed":634,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6e6bedf1-8c54-4b14-ff92-7099b77a3081"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 0.4640 degrees.\n","Accuracy = 91.66%.\n"]}],"source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    errors = abs(predictions - test_labels)\n","    mape = 100 * np.mean(errors / test_labels)\n","    accuracy = 100 - mape\n","    print('Model Performance')\n","    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    \n","    return accuracy\n","    \n","base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\n","base_model.fit(wines_rw_predictors, wines_rw_labels)\n","base_accuracy = evaluate(base_model, x_test_rw, y_test_rw)\n"]},{"cell_type":"code","execution_count":58,"metadata":{"id":"JVfDjmh2y6HQ","executionInfo":{"status":"ok","timestamp":1679598916597,"user_tz":-60,"elapsed":229,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d67e1935-13aa-4638-d299-2b062a8f4a8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 0.3677 degrees.\n","Accuracy = 93.33%.\n"]}],"source":["best_random = rf_random.best_estimator_\n","random_accuracy = evaluate(best_random, x_test_rw, y_test_rw)\n"]},{"cell_type":"code","execution_count":59,"metadata":{"id":"XYLFGgqvckmf","executionInfo":{"status":"ok","timestamp":1679598939673,"user_tz":-60,"elapsed":724,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c1230f31-d46a-4849-86b3-1755a654ce8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 1.82%.\n"]}],"source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"]},{"cell_type":"markdown","source":["Hyper parameter tunning\n","GridSearchCV"],"metadata":{"id":"m6Xb1GuEPl3_"}},{"cell_type":"code","execution_count":73,"metadata":{"id":"vThltoE1_xto","executionInfo":{"status":"ok","timestamp":1679604792921,"user_tz":-60,"elapsed":328,"user":{"displayName":"Emilia Warchulska","userId":"06219436888342232874"}}},"outputs":[],"source":["from joblib.parallel import sqrt\n","from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'bootstrap': [False],\n","    'max_depth': [10,15,20],\n","    'max_features': [2,3],\n","    'min_samples_leaf': [1,2,3],\n","    'min_samples_split': [2,3,4],\n","    'n_estimators': [200,300,400]\n","}\n","# Create a based model\n","rf = RandomForestClassifier()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n","                          cv = 3, n_jobs = -1, verbose = 2)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qSyY8wCKAbTE","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a55cd70c-fe3f-4c78-a5ab-a6c66c002b75"},"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 162 candidates, totalling 486 fits\n"]}],"source":["# Fit the grid search to the data\n","grid_search.fit(wines_rw_predictors, wines_rw_labels)\n","grid_search.best_params_\n","\n","best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, x_test_rw, y_test_rw)\n","\n","\n","print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tUTqj-JEAdRT"},"outputs":[],"source":["grid_search"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO1XoKrK6cPB52YJiqkzHJW"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}